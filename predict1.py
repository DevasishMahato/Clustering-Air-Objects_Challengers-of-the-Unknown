# -*- coding: utf-8 -*-
"""predict1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l977ND1ahJKRInyUyxzTmW6qL2C4oKjM
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

df = pd.read_csv('/content/drive/Shared drives/SIH2020/Dataset/atomdata/datawithoutgroup.csv')
df.head()

df.columns
df.rename(columns={'Altitude (m masl GPS)':'Altitude'},inplace=True)
df.head()

data = df[['Latitude','Longitude','Altitude']]
data.head()

new = data.shift(-1,axis=0)
new.head()

final = pd.concat([data,new],axis=1)
final.head()



print(len(final))
final.dropna(inplace=True)
print(len(final))

values = final.values
scaler = MinMaxScaler(feature_range=(0, 1))
values = scaler.fit_transform(values)
X = values[:,:3]
Y = values[:,3:]

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=1000,shuffle=True)

print(X_train.shape,X_test.shape)

X_train = np.reshape(X_train,(165399,1,3))
X_test = np.reshape(X_test,(1000,1,3))

model = Sequential()
model.add(LSTM(50, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(3))
model.compile(loss='mae', optimizer='adam')
# fit network
history = model.fit(X_train, Y_train, epochs=50, batch_size=100, validation_data=(X_test, Y_test), verbose=2, shuffle=False)



